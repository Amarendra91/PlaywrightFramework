name: playwright_web_test
run-name: E2E Web tests

on:
  push:
    branches: [main, master]

  workflow_dispatch:
    inputs:
      test_env:
        description: 'Select test environment (demo or dev)'
        required: true
        default: demo
        type: choice
        options:
          - demo
          - dev
      test_tag:
        description: 'Select test tag (Smoke or Regression)'
        required: true
        default: Smoke
        type: choice
        options:
          - Smoke
          - Regression

jobs:
  test:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.test_env || 'demo' }}

    env:
      BASE_URL: ${{ vars.BASE_URL }}
      USER_NAME: ${{ secrets.USER_NAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Determine Test Tagging
        id: tag
        run: |
          # Use tag from workflow_dispatch or default to 'Smoke'
          if [ -n "${{ github.event.inputs.test_tag }}" ]; then
            echo "tag=${{ github.event.inputs.test_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=Smoke" >> $GITHUB_OUTPUT
          fi
      - name: Run Playwright tests
        run: |
          echo "Running tests with tag: ${{ steps.tag.outputs.tag }}"
          SECRET_KEY=${{ secrets.SECRET_KEY }} npx playwright test --project=web --grep "@${{ steps.tag.outputs.tag }}"
      - name: Upload Report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      - name: Publish Test Report
        uses: ctrf-io/github-test-reporter@v1
        with:
          report-path: './ctrf/*.json'
          summary-report: true
          failed-report: true
          flaky-report: true
          test-report: true
          # Order reports with the most important information first
          report-order: 'summary-report,test-report,failed-report,flaky-report'
        if: always()
      - name: Read Test Results and Notify Slack
        run: |
          echo "Reading report.."
          REPORT_FILE=$({{ github.workspace }}/ctrf/*.json | head -n 1)
          RESULTS=cat "$REPORT_FILE"
          TOTAL=$(jq '.suites[].specs | length' <<< "$RESULTS")
          PASSED=$(jq '[.. | select(.status? == "passed")] | length' <<< "$RESULTS")
          FAILED=$(jq '[.. | select(.status? == "failed")] | length' <<< "$RESULTS")
          SKIPPED= $(jq '[.. | select(.status? == "skipped")] | length' <<< "$RESULTS")
          FLAKY=$(jq '[.. | select(.status? == "flaky")] | length' <<< "$RESULTS")

          STATUS="✅ PASSED"
          if [[ $FAILED -gt 0 ]]; then
            STATUS="❌ FAILED"
          elif [[ $FLAKY -gt 0 ]]; then
            STATUS="⚠️ Passed with FLAKY test(s)"
          fi

          REPORT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          SLACK_MESSAGE="*🎭 Playwright Web Test Report*\n
          *Status:* $STATUS\n
          *Total Tests:* $TOTAL\n
          *Passed:* $PASSED\n
          *Failed:* $FAILED\n
          *Skipped:* $SKIPPED\n
          *Flaky:* $FLAKY\n
          *Report:* <$REPORT_URL|View Workflow Run>\n"

          mention=""
          if [ "$failed" -gt 0 ] || [ "$flaky" -gt 0 ]; then
            mention="<@${{secrets.SLACK_USER}}>, kindly check the failed or flaky tests."
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"$SLACK_MESSAGE\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
